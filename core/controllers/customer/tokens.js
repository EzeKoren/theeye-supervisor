// DEPRECATED
// DEPRECATED
// DEPRECATED
// DEPRECATED
// DEPRECATED
// DEPRECATED
console.warn('DEPRECATED')
const router = require('../../router')
//const Token = require('../../entity/user').Entity
const randomToken = require('../../lib/token').randomToken

module.exports = (server) => {
  let middlewares = [
    server.auth.bearerMiddleware,
    router.requireCredential('admin'),
    router.resolve.idToEntity({ param: 'customer', required: true }),
    router.ensureCustomer,
  ]

  server.get(
    '/customer/:customer/token',
    middlewares,
    controller.fetch
  )

  server.post(
    '/customer/:customer/token',
    middlewares,
    controller.create
  )

  // refresh
  server.put(
    '/customer/:customer/token/:token/refresh',
    middlewares,
    resolveCustomerToken,
    controller.refresh
  )

  // refresh
  server.del(
    '/customer/:customer/token/:token',
    middlewares,
    resolveCustomerToken,
    controller.remove
  )
}

/**
 * ensure the token belongs to the customer
 */
const resolveCustomerToken = (req, res, next) => {
  let customer = req.customer
  let token = req.params.token

  Token.findOne({
    _id: token,
    'customers._id': customer._id.toString()
  }, (err, token) => {
    if (err) { return res.send(500, 'database error') }
    if (!token) { return res.send(404, 'token not found') }

    req.token = token
    return next(null)
  })
}

const controller = {
  create (req, res, next) {
    const customer = req.customer
    const name = req.body.name || `${customer.name}_${randomToken()}`
    let idToken = randomToken()
    const attrs = {
      client_id: idToken,
      //client_secret: randomToken(), // without the secret, this token cannot be regenerated by users
      token: randomToken(),
      email: `info+${idToken}@theeye.io`,
      customers: [
        {
          _id: customer._id,
          name: customer.name,
          customer: customer._id
        }
      ],
      credential: 'integration',
      enabled: true,
      username: name
    }

    let token = new Token(attrs)
    token.save(err => {
      if (err) { return res.send(500, err) }
      
      res.send(200, token)
      req.token = token
      return next()
    })
  },
  remove (req, res, next) {
    req.token.remove(err => {
      if (err) { return res.send(500) }
      res.send(200)
      next()
    })
  },
  /**
   *
   * create or update
   *
   */
  refresh (req, res, next) {
    let token = req.token
  },
  fetch (req, res, next) {
    const customer = req.customer
    Token.find({
      'customers._id': customer._id.toString(),
      credential: 'integration'
    }, (err, tokens) => {
      if (err) { return res.send(500, 'database error') }

      res.send(200, tokens)
      next(null)
    })
  }
}
