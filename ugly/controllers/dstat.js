"use strict";var json=require("../lib/jsonresponse"),HostStats=require("../entity/host/stats").Entity,logger=require("../lib/logger")("eye:supervisor:controller:dstat"),NotificationService=require("../service/notification"),paramsResolver=require("../router/param-resolver"),config=require("config"),elastic=require("../lib/elastic");module.exports=function(e,t){e.post("/:customer/dstat/:hostname",[t.authenticate("bearer",{session:!1}),paramsResolver.customerNameToEntity({}),paramsResolver.hostnameToHost({})],controller.create)};var controller={create:function(e,t,r){logger.log("Handling host dstat data");var o=e.host,n=e.customer,i=e.params.dstat;if(!o)return t.send(404,"host not found");if(!i)return t.send(400,"no stats supplied");HostStats.findOneByHostAndType(o._id,"dstat",function(e,t){if(e)return logger.error(e);if(null==t)logger.log("creating host dstat"),HostStats.create(o,"dstat",i);else{logger.log("updating host dstat");var r=new Date;t.last_update=r,t.last_update_timestamp=r.getTime(),t.stats=i,t.save()}}),logger.log("resending dstat data");var s={timestamp:(new Date).getTime(),date:(new Date).toISOString(),customer_name:n.name,hostname:o.hostname,stats:e.params.dstat,type:"host-stats"};logger.data("dstat %j",s);var a=config.elasticsearch.keys.host.stats;return elastic.submit(n.name,a,s),NotificationService.sendSNSNotification(s,{topic:"host-stats",subject:"dstat_update"}),t.send(200)}};